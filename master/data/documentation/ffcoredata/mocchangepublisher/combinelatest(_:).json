{
  "abstract" : [
    {
      "text" : "Subscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/FFCoreData\/documentation\/FFCoreData",
        "doc:\/\/FFCoreData\/documentation\/FFCoreData\/MOCChangePublisher",
        "doc:\/\/FFCoreData\/documentation\/FFCoreData\/MOCChangePublisher\/Publisher-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FFCoreData\/documentation\/FFCoreData\/MOCChangePublisher\/combineLatest(_:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "Combine",
    "externalID" : "s:7Combine9PublisherPAAE13combineLatestyAA10PublishersO0aD0Vy_xqd__Gqd__AaBRd__7FailureQyd__AJRtzlF::SYNTHESIZED::s:10FFCoreData18MOCChangePublisherV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "combineLatest"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "genericParameter",
        "text" : "P"
      },
      {
        "kind" : "text",
        "text" : ">("
      },
      {
        "kind" : "typeIdentifier",
        "text" : "P"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Combine10PublishersO",
        "text" : "Publishers"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Combine10PublishersO0A6LatestV",
        "text" : "CombineLatest"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "P"
      },
      {
        "kind" : "text",
        "text" : ">"
      }
    ],
    "modules" : [
      {
        "name" : "FFCoreData"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "6.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "combineLatest(_:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "combineLatest"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "P"
            },
            {
              "kind" : "text",
              "text" : ">("
            },
            {
              "kind" : "externalParam",
              "text" : "_"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "other"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "P"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Combine10PublishersO",
              "text" : "Publishers"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Combine10PublishersO0A6LatestV",
              "text" : "CombineLatest"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "P"
            },
            {
              "kind" : "text",
              "text" : "> "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "P"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Combine9PublisherP",
              "text" : "Publisher"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Failure"
            },
            {
              "kind" : "text",
              "text" : " == "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "P"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Failure"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A publisher that receives and combines elements from this and another publisher.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Another publisher to combine with this one.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "other"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use ",
              "type" : "text"
            },
            {
              "code" : "Publisher\/combineLatest(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use ",
              "type" : "text"
            },
            {
              "code" : "Publisher\/zip(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " instead. To receive just the most-recent element from multiple publishers rather than tuples, use ",
              "type" : "text"
            },
            {
              "code" : "Publisher\/merge(with:)-7qt71",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The combined publisher doesn’t produce elements until each of its upstream publishers publishes at least one element.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Tip",
          "style" : "tip",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The combined publisher passes through any requests to ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "all",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn’t ",
              "type" : "text"
            },
            {
              "code" : "Subscribers\/Demand\/unlimited",
              "type" : "codeVoice"
            },
            {
              "text" : ", it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, ",
              "type" : "text"
            },
            {
              "code" : "PassthroughSubject",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "pub1",
              "type" : "codeVoice"
            },
            {
              "text" : " and also ",
              "type" : "text"
            },
            {
              "code" : "pub2",
              "type" : "codeVoice"
            },
            {
              "text" : " emit values; as ",
              "type" : "text"
            },
            {
              "code" : "Publisher\/combineLatest(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let pub1 = PassthroughSubject<Int, Never>()",
            "let pub2 = PassthroughSubject<Int, Never>()",
            "",
            "cancellable = pub1",
            "    .combineLatest(pub2)",
            "    .sink { print(\"Result: \\($0).\") }",
            "",
            "pub1.send(1)",
            "pub1.send(2)",
            "pub2.send(2)",
            "pub1.send(3)",
            "pub1.send(45)",
            "pub2.send(22)",
            "",
            "\/\/ Prints:",
            "\/\/    Result: (2, 2).    \/\/ pub1 latest = 2, pub2 latest = 2",
            "\/\/    Result: (3, 2).    \/\/ pub1 latest = 3, pub2 latest = 2",
            "\/\/    Result: (45, 2).   \/\/ pub1 latest = 45, pub2 latest = 2",
            "\/\/    Result: (45, 22).  \/\/ pub1 latest = 45, pub2 latest = 22"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/ffcoredata\/mocchangepublisher\/combinelatest(_:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FFCoreData/documentation/FFCoreData": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FFCoreData\/documentation\/FFCoreData",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FFCoreData",
  "type" : "topic",
  "url" : "\/documentation\/ffcoredata"
},
"doc://FFCoreData/documentation/FFCoreData/MOCChangePublisher": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MOCChangePublisher"
    }
  ],
  "identifier" : "doc:\/\/FFCoreData\/documentation\/FFCoreData\/MOCChangePublisher",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MOCChangePublisher"
    }
  ],
  "role" : "symbol",
  "title" : "MOCChangePublisher",
  "type" : "topic",
  "url" : "\/documentation\/ffcoredata\/mocchangepublisher"
},
"doc://FFCoreData/documentation/FFCoreData/MOCChangePublisher/Publisher-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FFCoreData\/documentation\/FFCoreData\/MOCChangePublisher\/Publisher-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Publisher Implementations",
  "type" : "topic",
  "url" : "\/documentation\/ffcoredata\/mocchangepublisher\/publisher-implementations"
},
"doc://FFCoreData/documentation/FFCoreData/MOCChangePublisher/combineLatest(_:)": {
  "abstract" : [
    {
      "text" : "Subscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "combineLatest"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "P"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "P"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Combine10PublishersO",
      "text" : "Publishers"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Combine10PublishersO0A6LatestV",
      "text" : "CombineLatest"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "P"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/FFCoreData\/documentation\/FFCoreData\/MOCChangePublisher\/combineLatest(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "combineLatest(_:)",
  "type" : "topic",
  "url" : "\/documentation\/ffcoredata\/mocchangepublisher\/combinelatest(_:)"
}
}
}